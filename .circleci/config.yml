version: 2
commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      stackname:
        type: string
    steps:
      - run:
          name: Delete backend and frontend stack on fail
          when: on_fail
          command: |
            echo << parameters.stackname >>
            aws cloudformation delete-stack --stack-name << parameters.stackname >> --debug
jobs:
  backend_app_build:
    docker:
      - image: cimg/python:3.10.2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install pip packages
          command: |
            python3 -m venv ~/.venv
            source ~/.venv/bin/activate
            pip install -r backend/requirements.txt
      - run:
          name: Build and push to Docker Hub
          command: |
            docker build -f backend/Dockerfile -t tomlui2010/$IMAGE_NAME:latest .
            echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USER_ID" --password-stdin
            docker push tomlui2010/$IMAGE_NAME:latest
      # - run:
      #     name: Create secrets env file
      #     command: |
      #       echo "SECRET_FILE=${secrets}" > backend/secrets.env
      # - run:
      #     name: Run Docker container
      #     command: |
      #       docker run --env-file backend/secrets.env -p 5000:5000 tomlui2010/$IMAGE_NAME:latest
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum update -y
            yum install -y tar gzip
            yum install -y jq
      - run:
          name: Create backend infrastructure
          command: |
             set +e
             aws cloudformation deploy  \
              --template-file .circleci/files/backend.yml  \
              --stack-name "pppcalculator-backend-${CIRCLE_WORKFLOW_ID:0:7}"  \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=pppcalculator
             DEPLOY_EXIT_CODE=$?
             if [ $DEPLOY_EXIT_CODE -ne 0 ]; then
              aws cloudformation describe-stack-events --stack-name "pppcalculator-backend-${CIRCLE_WORKFLOW_ID:0:7}" >> /tmp/backend-output.txt
              cat /tmp/backend-output.txt
              exit 1
             fi
             set -e
  # Wait for CloudFormation stack creation completion
      - run:
          name: Wait for EC2 instance creation
          command: |
            aws cloudformation wait stack-create-complete --stack-name "pppcalculator-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      # Get EC2 instance public IP address
      - run:
          name: Get EC2 instance public IP
          command: |
            echo "[BACKEND]" > /tmp/inventory.txt
            aws ec2 describe-instances --filters Name=tag:Name,Values="pppcalculator-backend-${CIRCLE_WORKFLOW_ID:0:7}" --query "Reservations[0].Instances[0].PublicIpAddress" --output text > /tmp/inventory.txt
            cat /tmp/inventory.txt
      # - run:
      #     name: Add back-end ip to ansible inventory
      #     command: |
      #        echo "[BACKEND]" > /tmp/inventory.txt
      #        echo "Waiting for the EC2 instance to be in the running state..."
      #        INSTANCE_ID=$(aws ec2 describe-instances --query "Reservations[*].Instances[?Tags[?Key=='Name' && Value=='pppcalculator-backend-${CIRCLE_WORKFLOW_ID:0:7}']].InstanceId" --output text)
      #        PUBLIC_IP=$(aws ec2 describe-instances --instance-ids "$INSTANCE_ID" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
      #        echo "$PUBLIC_IP" >> /root/project/.circleci/ansible/inventory.txt
      #        echo "$PUBLIC_IP" >> /tmp/inventory.txt
      #        cat /tmp/inventory.txt
      - persist_to_workspace:
          root: /tmp
          paths: 
            - inventory.txt
      # Use Ansible to setup Docker and deploy Flask app on EC2 instance
      # - run:
      #     name: Setup Docker and deploy Flask app with Ansible
      #     command: |
      #       ansible-playbook -i "{{ shell }}" setup-docker.yml --extra-vars "target=ec2-user@$(cat ec2_ip.txt)" --private-key ~/.ssh/my-key.pem
  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      # You need to only provide this at one place. Either here or in the web UI ssh keys
      # - add_ssh_keys:
      #     fingerprints: ["SHA256:4tIF9h1n35rXfaRYvtiFZ0YFJ2dyDrpJi8RVNkisi5Y"]
      - attach_workspace:
          at: /tmp
      - run: 
          name: Install Ansible
          command: |
            apk add --update ansible openssh-client
            eval $(ssh-agent -s)
      - run:
          name: Run Playbook and Configure Prometheus 
          command: |
            #  cat /tmp/inventory.txt
            #  cat /tmp/public_dns.env
            ansible-playbook --extra-vars "aws_access_key_id=${AWS_ACCESS_KEY_ID} aws_secret_access_key=${AWS_SECRET_ACCESS_KEY}" -i /tmp/inventory.txt .circleci/ansible/playbook.yml 
workflows:
  version: 2
  backend:
    jobs:
      - backend_app_build:
          context:
            - ppp
      - deploy-infrastructure:
         context: 
          - ppp
      - configure_infrastructure:
          requires:
            - deploy-infrastructure
          context: 
            - ppp